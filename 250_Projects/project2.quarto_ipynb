{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Client Report - Finding Relationships in Baseball\"\n",
        "subtitle: \"Course DS 250\"\n",
        "author: \"[Maia Faith Chambers]\"\n",
        "format:\n",
        "  html:\n",
        "    self-contained: true\n",
        "    page-layout: full\n",
        "    title-block-banner: true\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    toc-location: body\n",
        "    number-sections: false\n",
        "    html-math-method: katex\n",
        "    code-fold: true\n",
        "    code-summary: \"Show the code\"\n",
        "    code-overflow: wrap\n",
        "    code-copy: hover\n",
        "    code-tools:\n",
        "        source: false\n",
        "        toggle: true\n",
        "        caption: See code\n",
        "execute: \n",
        "  warning: false\n",
        "    \n",
        "---"
      ],
      "id": "93bbe34f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd \n",
        "import numpy as np\n",
        "import sqlite3\n",
        "from lets_plot import *\n",
        "\n",
        "LetsPlot.setup_html(isolated_frame=True)\n",
        "sqlite_file = 'lahmansbaseballdb.sqlite'\n",
        "con = sqlite3.connect(sqlite_file)\n",
        "# Debug: Check if tables exist\n",
        "tables = pd.read_sql_query(\"SELECT name FROM sqlite_master WHERE type='table';\", con)\n",
        "print(\"Available tables:\\n\", tables)"
      ],
      "id": "a414c0fb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html\n"
      ],
      "id": "6d1c167a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## QUESTION|TASK 1\n",
        "\n",
        "__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__  \n",
        "\n",
        "The query below returns the results of two players who attended BYU-Idaho: Mark L. Lindsma and Garrett Stephenson, identified by their player IDs as lindsma01 and stephga01, respectively. Both players had long and varied careers in Major League Baseball. Lindsma played from 2007 to 2014, while Stephenson’s career spanned from 1997 to 2003. Lindsma’s salary peaked later in his career, earning $4,000,000 in 2014 with the Chicago White Sox. In contrast, Stephenson reached his highest salary of $1,025,000 in 2001, during the mid-point of his career with the St. Louis Cardinals. This analysis highlights the financial success of these two BYU-Idaho alumni in the professional baseball world.\n"
      ],
      "id": "a73f07b3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Query salary info for BYU-Idaho players using known playerIDs\n",
        "query_byu_players = \"\"\"\n",
        "SELECT \n",
        "    playerID, \n",
        "    salary,\n",
        "    yearID,\n",
        "    teamID\n",
        "FROM \n",
        "    Salaries\n",
        "WHERE \n",
        "    playerID IN ('lindsma01', 'stephga01')\n",
        "ORDER BY \n",
        "    salary DESC;\n",
        "\"\"\"\n",
        "df_baseball1 = pd.read_sql_query(query_byu_players, con)\n",
        "df_baseball1[\"schoolID\"] = \"idbyuid\"\n",
        "df_baseball1"
      ],
      "id": "e20d1364",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#This part is extra, I wanted to see how it would look in a lets plot showing the comparrison of salary over the two players careers.\n",
        "# Line plot to visualize their salary over time\n",
        "query_compare_salaries = \"\"\"\n",
        "SELECT \n",
        "    playerID, \n",
        "    yearID, \n",
        "    salary\n",
        "FROM \n",
        "    Salaries\n",
        "WHERE \n",
        "    playerID IN ('lindsma01', 'stephga01')\n",
        "ORDER BY \n",
        "    yearID;\n",
        "\"\"\"\n",
        "\n",
        "df_salaries = pd.read_sql_query(query_compare_salaries, con)\n",
        "\n",
        "player_colors = {\n",
        "    'lindsma01': '#27251F',\n",
        "    'stephga01': '#C41E3A'\n",
        "}\n",
        "\n",
        "ggplot(df_salaries, aes(x='yearID', y='salary', color=as_discrete('playerID'))) + \\\n",
        "    geom_line(size=2) + \\\n",
        "    scale_color_manual(values=player_colors) + \\\n",
        "    scale_x_continuous(breaks=list(range(df_salaries['yearID'].min(), df_salaries['yearID'].max()+1))) + \\\n",
        "    ggtitle(\"Salary Comparison: Mark Lindsma vs Garrett Stephenson\") + \\\n",
        "    xlab(\"Year\") + \\\n",
        "    ylab(\"Salary (USD)\") + \\\n",
        "    theme_minimal()\n"
      ],
      "id": "c289924e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## QUESTION|TASK 2\n",
        "\n",
        "__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__  \n",
        "    a. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.  \n",
        "    a. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.  \n",
        "    a. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.  \n",
        "\n",
        "This three-part question looked at batting averages, which are calculated by dividing hits by at-bats. For the first part, I found the top batting averages for players who had at least one at-bat in a season. Not surprisingly, all five players had a perfect 1.000 average, meaning they got a hit every time they were officially at bat that year. But most of them probably only had one or two chances, so the data isn't super meaningful yet.\n"
      ],
      "id": "d6109cad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Include and execute your code here\n",
        "query_2a = \"\"\"\n",
        "SELECT \n",
        "    playerID, \n",
        "    yearID, \n",
        "    ROUND(CAST(H AS FLOAT)/AB, 3) AS batting_avg\n",
        "FROM \n",
        "    Batting\n",
        "WHERE \n",
        "    AB > 0\n",
        "ORDER BY \n",
        "    batting_avg DESC, playerID ASC\n",
        "LIMIT 5;\n",
        "\"\"\"\n",
        "\n",
        "df_2a = pd.read_sql_query(query_2a, con)\n",
        "df_2a"
      ],
      "id": "e2088980",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "In the second part, I made the filter a bit stricter by only including players with at least 10 at-bats. This helped bring out more reliable results. The top players now had averages between .571 and .643, with names like Manny Ny (1974) and Carson M. (2013) leading the list. These guys still had great seasons, but the extra filter helps avoid flukes.\n"
      ],
      "id": "a0756f7f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "query_2b = \"\"\"\n",
        "SELECT \n",
        "    playerID, \n",
        "    yearID, \n",
        "    ROUND(CAST(H AS FLOAT)/AB, 3) AS batting_avg\n",
        "FROM \n",
        "    Batting\n",
        "WHERE \n",
        "    AB >= 10\n",
        "ORDER BY \n",
        "    batting_avg DESC, playerID ASC\n",
        "LIMIT 5;\n",
        "\"\"\"\n",
        "\n",
        "df_2b = pd.read_sql_query(query_2b, con)\n",
        "df_2b"
      ],
      "id": "7eed4513",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For the third part, I calculated batting averages over entire careers by summing up all hits and at-bats for each player and then dividing. I also made sure to only include players with at least 100 at-bats total. The results brought out legends like Ty Cobb (.366), Rogers Hornsby (.358), and Joe Jackson (.356). These are the kind of averages that reflect long-term consistency, not just one standout season.\n"
      ],
      "id": "541b635f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "query_2c = \"\"\"\n",
        "SELECT \n",
        "    playerID, \n",
        "    ROUND(SUM(CAST(H AS FLOAT))/SUM(AB), 3) AS career_batting_avg\n",
        "FROM \n",
        "    Batting\n",
        "GROUP BY \n",
        "    playerID\n",
        "HAVING \n",
        "    SUM(AB) >= 100\n",
        "ORDER BY \n",
        "    career_batting_avg DESC, playerID ASC\n",
        "LIMIT 5;\n",
        "\"\"\"\n",
        "\n",
        "df_2c = pd.read_sql_query(query_2c, con)\n",
        "df_2c\n"
      ],
      "id": "479ea0bb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## QUESTION|TASK 3\n",
        "\n",
        "__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?__\n",
        "\n",
        "I used the Seattle Mariners and the Texas rangers using average salary by year as my metric. The SQL query groups the player salaries by team and year and then calculates the average salary for each. The results are from the range years of 1985 to 2016, during this time the avaerage salary was over $6 million. The Marineres showed growth but were slightly behind in the end. This comparison gave me a better sense of how each organization has financially valued its players over time. It also raises questions about how payroll size might relate to team performance, although I'm a mariners fan, I realize we lost many games so it would be interesting to see a performance to salary analysis.\n"
      ],
      "id": "f41593fc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "query_task3_mariners_rangers = \"\"\"\n",
        "SELECT \n",
        "    teamID, \n",
        "    yearID, \n",
        "    ROUND(AVG(salary), 2) AS avg_salary\n",
        "FROM \n",
        "    Salaries\n",
        "WHERE \n",
        "    teamID IN ('SEA', 'TEX')\n",
        "GROUP BY \n",
        "    teamID, yearID\n",
        "ORDER BY \n",
        "    yearID;\n",
        "\"\"\"\n",
        "\n",
        "df_task3_mr = pd.read_sql_query(query_task3_mariners_rangers, con)\n",
        "df_task3_mr"
      ],
      "id": "b2ecfd98",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The chart shows that both teams started with lower salaries in the 1980s, but average pay steadily increased over time. While both teams experienced ups and downs, the Texas Rangers had more dramatic spikes and sharper increases compared to the Mariners. The Mariners' salary growth was more consistent and gradual, whereas the Rangers ended up on top with more noticeable jumps throughout the years.\n"
      ],
      "id": "f5820f89"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#the plot\n",
        "from lets_plot.mapping import as_discrete\n",
        "\n",
        "team_colors = {\n",
        "    'SEA': '#0C2C56',  # Mariners - Navy\n",
        "    'TEX': '#C0111F'   # Rangers - Red\n",
        "}\n",
        "\n",
        "ggplot(df_task3_mr, aes(x='yearID', y='avg_salary', color=as_discrete('teamID'))) + \\\n",
        "    geom_line(size=1.5) + \\\n",
        "    scale_color_manual(values=team_colors) + \\\n",
        "    scale_x_continuous(breaks=list(range(df_task3_mr['yearID'].min(), df_task3_mr['yearID'].max()+1))) + \\\n",
        "    ggtitle(\"Average Salary: Seattle Mariners vs Texas Rangers\") + \\\n",
        "    xlab(\"Year\") + \\\n",
        "    ylab(\"Average Salary (USD)\") + \\\n",
        "    theme_minimal()"
      ],
      "id": "e7deb676",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## STRETCH QUESTION|TASK 1\n",
        "\n",
        "__Advanced Salary Distribution by Position (with Case Statement):__  \n",
        "\n",
        "    * Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column. \n",
        "    \n",
        "        Include the following columns:\n",
        "\n",
        "        * position\n",
        "        * average_salary\n",
        "        * total_players\n",
        "        * highest_salary  \n",
        "\n",
        "    * The highest_salary column should display the highest salary ever earned by a player in that position. \n",
        "\n",
        "    * Additionally, create a new column called salary_category using a case statement:  \n",
        "\n",
        "        * If the average salary is above $3 million, categorize it as “High Salary.”\n",
        "        * If the average salary is between $2 million and $3 million, categorize it as “Medium Salary.”\n",
        "        * Otherwise, categorize it as “Low Salary.”  \n",
        "\n",
        "    * Order the table by average salary in descending order.\n",
        "\n",
        "    **Hint:** Beware, it is common for a player to play multiple positions in a single year. For this analysis, each player’s salary should only be counted toward one position in a given year: the position at which they played the most games that year. This will likely require a (sub-query)[https://docs.data.world/documentation/sql/concepts/advanced/WITH.html].\n",
        "\n",
        "    \n",
        "\n",
        "_type your results and analysis here_\n"
      ],
      "id": "79f2ea8e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Include and execute your code here\n",
        "salary_by_position_query = \"\"\"\n",
        "WITH PrimaryPosition AS (\n",
        "    SELECT \n",
        "        playerID,\n",
        "        yearID,\n",
        "        POS,\n",
        "        MAX(G) AS games_played\n",
        "    FROM (\n",
        "        SELECT \n",
        "            playerID, \n",
        "            yearID, \n",
        "            POS, \n",
        "            SUM(G) AS G\n",
        "        FROM \n",
        "            Fielding\n",
        "        GROUP BY \n",
        "            playerID, yearID, POS\n",
        "    )\n",
        "    GROUP BY \n",
        "        playerID, yearID\n",
        "    HAVING \n",
        "        G = MAX(G)\n",
        "),\n",
        "\n",
        "PositionSalary AS (\n",
        "    SELECT \n",
        "        pp.POS AS position,\n",
        "        s.playerID,\n",
        "        s.salary\n",
        "    FROM \n",
        "        Salaries s\n",
        "    JOIN \n",
        "        PrimaryPosition pp ON s.playerID = pp.playerID AND s.yearID = pp.yearID\n",
        ")\n",
        "\n",
        "SELECT \n",
        "    position,\n",
        "    ROUND(AVG(salary), 2) AS average_salary,\n",
        "    COUNT(DISTINCT playerID) AS total_players,\n",
        "    MAX(salary) AS highest_salary,\n",
        "    CASE \n",
        "        WHEN AVG(salary) > 3000000 THEN 'High Salary'\n",
        "        WHEN AVG(salary) BETWEEN 2000000 AND 3000000 THEN 'Medium Salary'\n",
        "        ELSE 'Low Salary'\n",
        "    END AS salary_category\n",
        "FROM \n",
        "    PositionSalary\n",
        "GROUP BY \n",
        "    position\n",
        "ORDER BY \n",
        "    average_salary DESC;\n",
        "\"\"\"\n",
        "\n",
        "df_salary_by_position = pd.read_sql_query(salary_by_position_query, con)\n",
        "df_salary_by_position\n"
      ],
      "id": "a5462ce4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## STRETCH QUESTION|TASK 2\n",
        "\n",
        "__Advanced Career Longevity and Performance (with Subqueries):__\n",
        "\n",
        "    * Calculate the average career length (in years) for players who have played at least **10 games**. Then, identify the top 10 players with the longest careers (based on the number of years they played). Include their: \n",
        "\n",
        "        * playerID\n",
        "        * first_name\n",
        "        * last_name\n",
        "        * career_length\n",
        "\n",
        "    * The career_length should be calculated as the difference between the maximum and minimum yearID for each player.  \n",
        "\n",
        "_type your results and analysis here_\n"
      ],
      "id": "c977dfe6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "career_query = \"\"\"\n",
        "WITH CareerSpan AS (\n",
        "    SELECT \n",
        "        a.playerID,\n",
        "        MIN(a.yearID) AS start_year,\n",
        "        MAX(a.yearID) AS end_year,\n",
        "        (MAX(a.yearID) - MIN(a.yearID) + 1) AS career_length,\n",
        "        SUM(a.G_all) AS total_games\n",
        "    FROM \n",
        "        Appearances a\n",
        "    GROUP BY \n",
        "        a.playerID\n",
        "    HAVING \n",
        "        total_games >= 10\n",
        "),\n",
        "\n",
        "TopCareers AS (\n",
        "    SELECT \n",
        "        cs.playerID,\n",
        "        p.nameFirst AS first_name,\n",
        "        p.nameLast AS last_name,\n",
        "        cs.career_length\n",
        "    FROM \n",
        "        CareerSpan cs\n",
        "    JOIN \n",
        "        People p ON cs.playerID = p.playerID\n",
        "    ORDER BY \n",
        "        cs.career_length DESC\n",
        "    LIMIT 10\n",
        ")\n",
        "\n",
        "SELECT \n",
        "    * \n",
        "FROM \n",
        "    TopCareers;\n",
        "\"\"\"\n",
        "\n",
        "df_top_careers = pd.read_sql_query(career_query, con)\n",
        "df_top_careers\n"
      ],
      "id": "0358cfce",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "avg_career_query = \"\"\"\n",
        "WITH CareerSpan AS (\n",
        "    SELECT \n",
        "        playerID,\n",
        "        MIN(yearID) AS start_year,\n",
        "        MAX(yearID) AS end_year,\n",
        "        (MAX(yearID) - MIN(yearID) + 1) AS career_length,\n",
        "        SUM(G_all) AS total_games\n",
        "    FROM \n",
        "        Appearances\n",
        "    GROUP BY \n",
        "        playerID\n",
        "    HAVING \n",
        "        total_games >= 10\n",
        ")\n",
        "\n",
        "SELECT \n",
        "    ROUND(AVG(career_length), 2) AS avg_career_length\n",
        "FROM \n",
        "    CareerSpan;\n",
        "\"\"\"\n",
        "\n",
        "df_avg_career = pd.read_sql_query(avg_career_query, con)\n",
        "df_avg_career"
      ],
      "id": "8bc3a3b5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n"
      ],
      "id": "c60312cf"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Library/Frameworks/Python.framework/Versions/3.12/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}