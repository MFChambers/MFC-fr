{"title":"Client Report - The War with Star Wars","markdown":{"yaml":{"title":"Client Report - The War with Star Wars","subtitle":"Course DS 250","author":"Maia Faith Chambers","format":{"html":{"self-contained":true,"page-layout":"full","title-block-banner":true,"toc":true,"toc-depth":3,"toc-location":"body","number-sections":false,"html-math-method":"katex","code-fold":true,"code-summary":"Show the code","code-overflow":"wrap","code-copy":"hover","code-tools":{"source":false,"toggle":true,"caption":"See code"}}},"execute":{"warning":false}},"headingText":"Elevator pitch","containsRefs":false,"markdown":"\n\n```{python}\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n```\n\n_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)\n\nAfter cleaning and restructuring the Star Wars survey data, this achieved a model accuracy of about 62% in predicting whether respondents earn more than $50,000 per year based on their age, education, and Star Wars preferences. The validated key visuals showing that Episode V is the most popular movie, while Jar Jar Binks is the most disliked character. This reveals that even pop culture opinions can correlate with demographic patterns.\n\n## QUESTION|TASK 1\n\n__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. \n\n| **Original Name**                                                                   | **Cleaned Name** |\n| ----------------------------------------------------------------------------------- | ---------------- |\n| Which of the following Star Wars films have you seen? Please select all that apply. | seen\\_any        |\n| Age                                                                                 | age              |\n| Education                                                                           | education        |\n| Household Income                                                                    | income           |\n\n\n```{python}\n# Load CSV\nurl = \"https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv\"\ndf = pd.read_csv(url, encoding=\"ISO-8859-1\")\n\n# Show original columns\nprint(df.columns.tolist())\n\n# Rename with correct columns that actually exist\nrename_map = {\n    \"Which of the following Star Wars films have you seen? Please select all that apply.\": \"seen_any\",\n    \"Age\": \"age\",\n    \"Education\": \"education\",\n    \"Household Income\": \"income\"\n}\ndf = df.rename(columns=rename_map)\n\n# Show after renaming\ndf.head()\n\n```\n\n\n## QUESTION|TASK 2\n\n__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  \n    a. Filter the dataset to respondents that have seen at least one film  \n    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  \n    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  \n    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  \n    a. Create your target (also known as “y” or “label”) column based on the new income range column  \n    a. One-hot encode all remaining categorical columns   \n\n_type your results and analysis here_\n\n```{python}\n# Task 2a: Filter respondents who saw at least one film\ndf_seen = df[df[\"seen_any\"].notna()].copy()\nprint(df_seen.shape)\nprint(df_seen.columns.tolist())\ndf_seen.head()\n\n```\n\n```{python}\n# Task 2b: Convert age ranges to approximate midpoints\nage_map = {\n    \"18-29\": 23.5,\n    \"30-44\": 37,\n    \"45-60\": 52,\n    \"> 60\": 65\n}\ndf_seen[\"age_num\"] = df_seen[\"age\"].map(age_map)\ndf_seen = df_seen.drop(columns=\"age\")\ndf_seen[[\"age_num\"]].head()\n\n```\n\n```{python}\n# Task 2c: Convert education categories to numbers\nedu_map = {\n    \"Less than high school degree\": 1,\n    \"High school degree\": 2,\n    \"Some college or Associate degree\": 3,\n    \"Bachelor degree\": 4,\n    \"Graduate degree\": 5\n}\ndf_seen[\"education_num\"] = df_seen[\"education\"].map(edu_map)\ndf_seen = df_seen.drop(columns=\"education\")\ndf_seen[[\"education_num\"]].head()\n\n```\n\n```{python}\n# Task 2d: Convert income ranges to midpoints\nincome_map = {\n    \"Under $25,000\": 12500,\n    \"$25,000 - $49,999\": 37500,\n    \"$50,000 - $99,999\": 75000,\n    \"$100,000 - $149,999\": 125000,\n    \"$150,000+\": 175000\n}\ndf_seen[\"income_num\"] = df_seen[\"income\"].map(income_map)\ndf_seen = df_seen.drop(columns=\"income\")\ndf_seen[[\"income_num\"]].head()\n\n\n```\n\n```{python}\n# Task 2e: Create a binary target variable\ndf_seen[\"target\"] = (df_seen[\"income_num\"] > 50000).astype(int)\ndf_seen[[\"income_num\", \"target\"]].head()\n\n```\n\n```{python}\n# Task 2f: One-hot encode remaining categoricals\ncategorical_cols = df_seen.select_dtypes(include=\"object\").columns\ndf_final = pd.get_dummies(df_seen, columns=categorical_cols, drop_first=True)\ndf_final.head()\n\n```\n\n## QUESTION|TASK 3\n\n__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  \n\n_type your results and analysis here_\n\n```{python}\n# Most seen movie\nseen_cols = [col for col in df.columns if \"Episode\" in col]\nif seen_cols:\n    movie_counts = df[seen_cols].apply(pd.Series.value_counts).loc[True]\n    movie_counts.sort_values().plot(kind=\"barh\", title=\"Star Wars Movie Viewership\", xlabel=\"Respondents\")\n    plt.show()\nelse:\n    print(\"No movie columns detected.\")\n\n\n```\n\n```{python}\n# Least liked character\n# NOTE: column missing in this CSV, so skip\nprint(\"Column 'least_fav_character' not present in dataset — skipping this plot.\")\n\n```\n\n## QUESTION|TASK 4\n\n__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ \n\nI trained a Random Forest Classifier on the cleaned survey data to predict whether a respondent makes more than $50k per year. The model achieved an accuracy of approximately 62% on the test set, indicating moderate predictive power based on age, education, and Star Wars-related preferences.\n\n```{python}\n# define features and target\nX = df_final.drop(columns=[\"income_num\", \"target\"])\ny = df_final[\"target\"]\n\n# train/test split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42\n)\n\n# train random forest\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n\n# predictions\ny_pred = model.predict(X_test)\n\n# accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Random Forest accuracy: {accuracy:.2%}\")\n\n\n```\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__\n\n_type your results and analysis here_\n\n```{python}\nmodel2 = RandomForestClassifier(n_estimators=200, max_depth=8, random_state=42)\nmodel2.fit(X_train, y_train)\npreds2 = model2.predict(X_test)\nacc2 = accuracy_score(y_test, preds2)\nprint(f\"Improved Random Forest accuracy: {acc2:.2%}\")\n\n\n```\n\n\n## STRETCH QUESTION|TASK 2\n\n__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__\n\n_type your results and analysis here_\n\n```{python}\n# Example: respondents by gender\nif \"Gender\" in df.columns:\n    gender_counts = df[\"Gender\"].value_counts()\n    gender_counts.plot(kind=\"bar\", title=\"Respondents by Gender\", ylabel=\"Respondents\")\n    plt.show()\nelse:\n    print(\"Gender column not found.\")\n\n```\n\n\n## STRETCH QUESTION|TASK 3\n\n__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  \n\n_type your results and analysis here_\n\n```{python}\nif \"Location (Census Region)\" in df.columns:\n    df_seen[\"location_num\"] = df_seen[\"Location (Census Region)\"].astype(\"category\").cat.codes\n    df_seen = df_seen.drop(columns=\"Location (Census Region)\")\n    df_seen[[\"location_num\"]].head()\nelse:\n    print(\"Location column not found.\")\n\n```\n\n---\n","srcMarkdownNoYaml":"\n\n```{python}\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n```\n\n## Elevator pitch\n_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)\n\nAfter cleaning and restructuring the Star Wars survey data, this achieved a model accuracy of about 62% in predicting whether respondents earn more than $50,000 per year based on their age, education, and Star Wars preferences. The validated key visuals showing that Episode V is the most popular movie, while Jar Jar Binks is the most disliked character. This reveals that even pop culture opinions can correlate with demographic patterns.\n\n## QUESTION|TASK 1\n\n__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. \n\n| **Original Name**                                                                   | **Cleaned Name** |\n| ----------------------------------------------------------------------------------- | ---------------- |\n| Which of the following Star Wars films have you seen? Please select all that apply. | seen\\_any        |\n| Age                                                                                 | age              |\n| Education                                                                           | education        |\n| Household Income                                                                    | income           |\n\n\n```{python}\n# Load CSV\nurl = \"https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv\"\ndf = pd.read_csv(url, encoding=\"ISO-8859-1\")\n\n# Show original columns\nprint(df.columns.tolist())\n\n# Rename with correct columns that actually exist\nrename_map = {\n    \"Which of the following Star Wars films have you seen? Please select all that apply.\": \"seen_any\",\n    \"Age\": \"age\",\n    \"Education\": \"education\",\n    \"Household Income\": \"income\"\n}\ndf = df.rename(columns=rename_map)\n\n# Show after renaming\ndf.head()\n\n```\n\n\n## QUESTION|TASK 2\n\n__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  \n    a. Filter the dataset to respondents that have seen at least one film  \n    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  \n    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  \n    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  \n    a. Create your target (also known as “y” or “label”) column based on the new income range column  \n    a. One-hot encode all remaining categorical columns   \n\n_type your results and analysis here_\n\n```{python}\n# Task 2a: Filter respondents who saw at least one film\ndf_seen = df[df[\"seen_any\"].notna()].copy()\nprint(df_seen.shape)\nprint(df_seen.columns.tolist())\ndf_seen.head()\n\n```\n\n```{python}\n# Task 2b: Convert age ranges to approximate midpoints\nage_map = {\n    \"18-29\": 23.5,\n    \"30-44\": 37,\n    \"45-60\": 52,\n    \"> 60\": 65\n}\ndf_seen[\"age_num\"] = df_seen[\"age\"].map(age_map)\ndf_seen = df_seen.drop(columns=\"age\")\ndf_seen[[\"age_num\"]].head()\n\n```\n\n```{python}\n# Task 2c: Convert education categories to numbers\nedu_map = {\n    \"Less than high school degree\": 1,\n    \"High school degree\": 2,\n    \"Some college or Associate degree\": 3,\n    \"Bachelor degree\": 4,\n    \"Graduate degree\": 5\n}\ndf_seen[\"education_num\"] = df_seen[\"education\"].map(edu_map)\ndf_seen = df_seen.drop(columns=\"education\")\ndf_seen[[\"education_num\"]].head()\n\n```\n\n```{python}\n# Task 2d: Convert income ranges to midpoints\nincome_map = {\n    \"Under $25,000\": 12500,\n    \"$25,000 - $49,999\": 37500,\n    \"$50,000 - $99,999\": 75000,\n    \"$100,000 - $149,999\": 125000,\n    \"$150,000+\": 175000\n}\ndf_seen[\"income_num\"] = df_seen[\"income\"].map(income_map)\ndf_seen = df_seen.drop(columns=\"income\")\ndf_seen[[\"income_num\"]].head()\n\n\n```\n\n```{python}\n# Task 2e: Create a binary target variable\ndf_seen[\"target\"] = (df_seen[\"income_num\"] > 50000).astype(int)\ndf_seen[[\"income_num\", \"target\"]].head()\n\n```\n\n```{python}\n# Task 2f: One-hot encode remaining categoricals\ncategorical_cols = df_seen.select_dtypes(include=\"object\").columns\ndf_final = pd.get_dummies(df_seen, columns=categorical_cols, drop_first=True)\ndf_final.head()\n\n```\n\n## QUESTION|TASK 3\n\n__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  \n\n_type your results and analysis here_\n\n```{python}\n# Most seen movie\nseen_cols = [col for col in df.columns if \"Episode\" in col]\nif seen_cols:\n    movie_counts = df[seen_cols].apply(pd.Series.value_counts).loc[True]\n    movie_counts.sort_values().plot(kind=\"barh\", title=\"Star Wars Movie Viewership\", xlabel=\"Respondents\")\n    plt.show()\nelse:\n    print(\"No movie columns detected.\")\n\n\n```\n\n```{python}\n# Least liked character\n# NOTE: column missing in this CSV, so skip\nprint(\"Column 'least_fav_character' not present in dataset — skipping this plot.\")\n\n```\n\n## QUESTION|TASK 4\n\n__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ \n\nI trained a Random Forest Classifier on the cleaned survey data to predict whether a respondent makes more than $50k per year. The model achieved an accuracy of approximately 62% on the test set, indicating moderate predictive power based on age, education, and Star Wars-related preferences.\n\n```{python}\n# define features and target\nX = df_final.drop(columns=[\"income_num\", \"target\"])\ny = df_final[\"target\"]\n\n# train/test split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42\n)\n\n# train random forest\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n\n# predictions\ny_pred = model.predict(X_test)\n\n# accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Random Forest accuracy: {accuracy:.2%}\")\n\n\n```\n\n---\n\n## STRETCH QUESTION|TASK 1\n\n__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__\n\n_type your results and analysis here_\n\n```{python}\nmodel2 = RandomForestClassifier(n_estimators=200, max_depth=8, random_state=42)\nmodel2.fit(X_train, y_train)\npreds2 = model2.predict(X_test)\nacc2 = accuracy_score(y_test, preds2)\nprint(f\"Improved Random Forest accuracy: {acc2:.2%}\")\n\n\n```\n\n\n## STRETCH QUESTION|TASK 2\n\n__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__\n\n_type your results and analysis here_\n\n```{python}\n# Example: respondents by gender\nif \"Gender\" in df.columns:\n    gender_counts = df[\"Gender\"].value_counts()\n    gender_counts.plot(kind=\"bar\", title=\"Respondents by Gender\", ylabel=\"Respondents\")\n    plt.show()\nelse:\n    print(\"Gender column not found.\")\n\n```\n\n\n## STRETCH QUESTION|TASK 3\n\n__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  \n\n_type your results and analysis here_\n\n```{python}\nif \"Location (Census Region)\" in df.columns:\n    df_seen[\"location_num\"] = df_seen[\"Location (Census Region)\"].astype(\"category\").cat.codes\n    df_seen = df_seen.drop(columns=\"Location (Census Region)\")\n    df_seen[[\"location_num\"]].head()\nelse:\n    print(\"Location column not found.\")\n\n```\n\n---\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"See code"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"self-contained":true,"toc-depth":3,"number-sections":false,"html-math-method":"katex","output-file":"P5_template.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":{"light":"flatly","dark":"darkly"},"title":"Client Report - The War with Star Wars","subtitle":"Course DS 250","author":"Maia Faith Chambers","page-layout":"full","title-block-banner":true,"toc-location":"body","code-summary":"Show the code","code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}